{"ast":null,"code":"/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we`re using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it`s a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\nimport axios from 'axios';\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n}); // THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const createTop5List = (newListName, newItems, userEmail) => {\n  return api.post(`/top5list/`, {\n    // SPECIFY THE PAYLOAD\n    name: newListName,\n    items: newItems,\n    ownerEmail: userEmail\n  });\n};\nexport const deleteTop5ListById = id => api.delete(`/top5list/${id}`);\nexport const getTop5ListById = id => api.get(`/top5list/${id}`);\nexport const getTop5ListPairs = () => api.get(`/top5listpairs/`);\nexport const updateTop5ListById = (id, top5List) => {\n  return api.put(`/top5list/${id}`, {\n    // SPECIFY THE PAYLOAD\n    top5List: top5List\n  });\n};\nconst apis = {\n  createTop5List,\n  deleteTop5ListById,\n  getTop5ListById,\n  getTop5ListPairs,\n  updateTop5ListById\n};\nexport default apis;","map":{"version":3,"sources":["C:/Users/iaref/Desktop/FinalProject/FinalProject/client/src/store/store-request-api/index.js"],"names":["axios","defaults","withCredentials","api","create","baseURL","createTop5List","newListName","newItems","userEmail","post","name","items","ownerEmail","deleteTop5ListById","id","delete","getTop5ListById","get","getTop5ListPairs","updateTop5ListById","top5List","put","apis"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AACA,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,WAAD,EAAcC,QAAd,EAAwBC,SAAxB,KAAsC;AAChE,SAAON,GAAG,CAACO,IAAJ,CAAU,YAAV,EAAuB;AAC1B;AACAC,IAAAA,IAAI,EAAEJ,WAFoB;AAG1BK,IAAAA,KAAK,EAAEJ,QAHmB;AAI1BK,IAAAA,UAAU,EAAEJ;AAJc,GAAvB,CAAP;AAMH,CAPM;AAQP,OAAO,MAAMK,kBAAkB,GAAIC,EAAD,IAAQZ,GAAG,CAACa,MAAJ,CAAY,aAAYD,EAAG,EAA3B,CAAnC;AACP,OAAO,MAAME,eAAe,GAAIF,EAAD,IAAQZ,GAAG,CAACe,GAAJ,CAAS,aAAYH,EAAG,EAAxB,CAAhC;AACP,OAAO,MAAMI,gBAAgB,GAAG,MAAMhB,GAAG,CAACe,GAAJ,CAAS,iBAAT,CAA/B;AACP,OAAO,MAAME,kBAAkB,GAAG,CAACL,EAAD,EAAKM,QAAL,KAAkB;AAChD,SAAOlB,GAAG,CAACmB,GAAJ,CAAS,aAAYP,EAAG,EAAxB,EAA2B;AAC9B;AACAM,IAAAA,QAAQ,EAAGA;AAFmB,GAA3B,CAAP;AAIH,CALM;AAOP,MAAME,IAAI,GAAG;AACTjB,EAAAA,cADS;AAETQ,EAAAA,kBAFS;AAGTG,EAAAA,eAHS;AAITE,EAAAA,gBAJS;AAKTC,EAAAA;AALS,CAAb;AAQA,eAAeG,IAAf","sourcesContent":["/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we`re using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it`s a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\nimport axios from 'axios'\r\naxios.defaults.withCredentials = true;\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:4000/api',\r\n})\r\n\r\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\r\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\r\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\r\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\r\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\r\n// CUSTOM FILTERS FOR QUERIES\r\nexport const createTop5List = (newListName, newItems, userEmail) => {\r\n    return api.post(`/top5list/`, {\r\n        // SPECIFY THE PAYLOAD\r\n        name: newListName,\r\n        items: newItems,\r\n        ownerEmail: userEmail\r\n    })\r\n}\r\nexport const deleteTop5ListById = (id) => api.delete(`/top5list/${id}`)\r\nexport const getTop5ListById = (id) => api.get(`/top5list/${id}`)\r\nexport const getTop5ListPairs = () => api.get(`/top5listpairs/`)\r\nexport const updateTop5ListById = (id, top5List) => {\r\n    return api.put(`/top5list/${id}`, {\r\n        // SPECIFY THE PAYLOAD\r\n        top5List : top5List\r\n    })\r\n}\r\n\r\nconst apis = {\r\n    createTop5List,\r\n    deleteTop5ListById,\r\n    getTop5ListById,\r\n    getTop5ListPairs,\r\n    updateTop5ListById\r\n}\r\n\r\nexport default apis\r\n"]},"metadata":{},"sourceType":"module"}