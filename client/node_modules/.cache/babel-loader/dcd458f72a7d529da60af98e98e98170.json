{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iaref\\\\Desktop\\\\FinalProject\\\\FinalProject\\\\client\\\\src\\\\store\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from './store-request-api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction';\nimport AuthContext from '../auth';\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\nconsole.log(\"create GlobalStoreContext\"); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  });\n  const history = useHistory();\n  console.log(\"inside useGlobalStore\"); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext);\n  console.log(\"auth: \" + auth); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.status === 200) {\n      let top5List = response.data.top5List;\n      top5List.name = newName;\n\n      async function updateList(top5List) {\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.status === 200) {\n          async function getListPairs(top5List) {\n            response = await api.getTop5ListPairs();\n\n            if (response.status === 200) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    const response = await api.createTop5List(newListName, [\"?\", \"?\", \"?\", \"?\", \"?\"], auth.user.email, auth.user.firstName, auth.user.lastName);\n    console.log(response.data.top5List);\n    console.log(\"createNewList response: \" + response);\n\n    if (response.status === 201) {\n      tps.clearAllTransactions();\n      let newList = response.data.top5List; //console.log(response.data.top5List.ownerUserName);\n\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    console.log(\"store.loadIdNamePairs\");\n    const response = await api.getTop5ListPairs();\n\n    if (response.status === 200) {\n      let pairsArray = response.data.idNamePairs;\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: pairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.status === 200) {\n      let top5List = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: top5List\n      });\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.status === 200) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.status === 200) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.status === 200) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n        history.push(\"/top5list/\" + top5List._id);\n      }\n    }\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addUpdateItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.status === 200) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; //THIS FUNCTION ENABLES THE PROCESS OF OPENING A LIST \n\n\n  store.setIsExpandActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_EXPAND_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 393,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"hbSESe4isqakf+98/JVbJOKEjxE=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["C:/Users/iaref/Desktop/FinalProject/FinalProject/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","jsTPS","api","MoveItem_Transaction","UpdateItem_Transaction","AuthContext","GlobalStoreContext","console","log","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","SET_LIST_NAME_EDIT_ACTIVE","tps","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","history","auth","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","changeListName","id","newName","response","getTop5ListById","status","data","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","clearAllTransactions","push","createNewList","newListName","createTop5List","user","email","firstName","lastName","newList","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","addMoveItemTransaction","start","end","transaction","addTransaction","addUpdateItemTransaction","index","newText","oldText","items","moveItem","temp","i","updateCurrentList","updateItem","newItem","undo","undoTransaction","redo","doTransaction","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","setIsListNameEditActive","setIsExpandActive","SET_EXPAND_ACTIVE","setIsItemEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from './store-request-api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\r\nimport AuthContext from '../auth'\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\r\nexport const GlobalStoreContext = createContext({});\r\nconsole.log(\"create GlobalStoreContext\");\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nfunction GlobalStoreContextProvider(props) {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null\r\n    });\r\n    const history = useHistory();\r\n\r\n    console.log(\"inside useGlobalStore\");\r\n\r\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\r\n    const { auth } = useContext(AuthContext);\r\n    console.log(\"auth: \" + auth);\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: payload\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST ITEM\r\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    isItemEditActive: true,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    isItemEditActive: false,\r\n                    listMarkedForDeletion: null\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = async function (id, newName) {\r\n        let response = await api.getTop5ListById(id);\r\n        if (response.status === 200) {\r\n            let top5List = response.data.top5List;\r\n            top5List.name = newName;\r\n            async function updateList(top5List) {\r\n                response = await api.updateTop5ListById(top5List._id, top5List);\r\n                if (response.status === 200) {\r\n                    async function getListPairs(top5List) {\r\n                        response = await api.getTop5ListPairs();\r\n                        if (response.status === 200) {\r\n                            let pairsArray = response.data.idNamePairs;\r\n                            storeReducer({\r\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                payload: {\r\n                                    idNamePairs: pairsArray,\r\n                                    top5List: top5List\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    getListPairs(top5List);\r\n                }\r\n            }\r\n            updateList(top5List);\r\n        }\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n        \r\n        tps.clearAllTransactions();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    // THIS FUNCTION CREATES A NEW LIST\r\n    store.createNewList = async function () {\r\n        let newListName = \"Untitled\" + store.newListCounter;\r\n        const response = await api.createTop5List(newListName, [\"?\", \"?\", \"?\", \"?\", \"?\"], auth.user.email, auth.user.firstName, auth.user.lastName);\r\n        console.log(response.data.top5List)\r\n        console.log(\"createNewList response: \" + response);\r\n        if (response.status === 201) {\r\n            tps.clearAllTransactions();\r\n            let newList = response.data.top5List;\r\n            //console.log(response.data.top5List.ownerUserName);\r\n            storeReducer({\r\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                payload: newList\r\n            }\r\n            );\r\n\r\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\r\n            history.push(\"/top5list/\" + newList._id);\r\n        }\r\n        else {\r\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\r\n        }\r\n    }\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = async function () {\r\n        console.log(\"store.loadIdNamePairs\");\r\n        const response = await api.getTop5ListPairs();\r\n        if (response.status === 200) {\r\n            let pairsArray = response.data.idNamePairs;\r\n            storeReducer({\r\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                payload: pairsArray\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n        }\r\n    }\r\n\r\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\r\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\r\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\r\n    // showDeleteListModal, and hideDeleteListModal\r\n    store.markListForDeletion = async function (id) {\r\n        // GET THE LIST\r\n        let response = await api.getTop5ListById(id);\r\n        if (response.status === 200) {\r\n            let top5List = response.data.top5List;\r\n            storeReducer({\r\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                payload: top5List\r\n            });\r\n        }\r\n    }\r\n\r\n    store.deleteList = async function (listToDelete) {\r\n        let response = await api.deleteTop5ListById(listToDelete._id);\r\n        if (response.status === 200) {\r\n            store.loadIdNamePairs();\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    store.deleteMarkedList = function () {\r\n        store.deleteList(store.listMarkedForDeletion);\r\n    }\r\n\r\n    store.unmarkListForDeletion = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = async function (id) {\r\n        let response = await api.getTop5ListById(id);\r\n        if (response.status === 200) {\r\n            let top5List = response.data.top5List;\r\n\r\n            response = await api.updateTop5ListById(top5List._id, top5List);\r\n            if (response.status === 200) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: top5List\r\n                });\r\n                history.push(\"/top5list/\" + top5List._id);\r\n            }\r\n        }\r\n    }\r\n\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addUpdateItemTransaction = function (index, newText) {\r\n        let oldText = store.currentList.items[index];\r\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n\r\n    store.updateItem = function (index, newItem) {\r\n        store.currentList.items[index] = newItem;\r\n        store.updateCurrentList();\r\n    }\r\n\r\n    store.updateCurrentList = async function () {\r\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n        if (response.status === 200) {\r\n            storeReducer({\r\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                payload: store.currentList\r\n            });\r\n        }\r\n    }\r\n\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    store.canUndo = function() {\r\n        return tps.hasTransactionToUndo();\r\n    }\r\n\r\n    store.canRedo = function() {\r\n        return tps.hasTransactionToRedo();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    //THIS FUNCTION ENABLES THE PROCESS OF OPENING A LIST \r\n    store.setIsExpandActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_EXPAND_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\r\n    store.setIsItemEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    return (\r\n        <GlobalStoreContext.Provider value={{\r\n            store\r\n        }}>\r\n            {props.children}\r\n        </GlobalStoreContext.Provider>\r\n    );\r\n}\r\n\r\nexport default GlobalStoreContext;\r\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}